name: Test

on:
  push:
    paths:
      - ".github/workflows/test.yml"
      - "packages/**"
      - "server/**"
      - "tests/**"
      - "package.json"
      - "pnpm-lock.yaml"
  pull_request:
    types: [opened]
    paths:
      - ".github/workflows/test.yml"
      - "packages/**"
      - "server/**"
      - "tests/**"
      - "package.json"
      - "pnpm-lock.yaml"
  workflow_dispatch:

permissions:
  actions: read

env:
  pnpm-version: 10

jobs:
  theme-unit:
    name: Theme / Unit Tests - OS ${{ matrix.os }} - Node v${{ matrix.node }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node: [22]
        os: [ubuntu-24.04]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: ${{ env.pnpm-version }}

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: Cache .pnpm-store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ matrix.os }}-OS-node-v${{ matrix.node }}-pnpm-v${{ env.pnpm-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ matrix.os }}-OS-node-v${{ matrix.node }}-pnpm-v${{ env.pnpm-version }}-

      - name: Install packages
        run: pnpm install --frozen-lockfile

      - name: Testing
        run: pnpm --filter @logchimp/theme test:unit

  theme-build:
    name: Theme / Build - OS ${{ matrix.os }} - Node v${{ matrix.node }}
    runs-on: ${{ matrix.os }}
    needs: [theme-unit]

    strategy:
      matrix:
        node: [22]
        os: [ubuntu-24.04]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 10

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: Cache .pnpm-store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ matrix.os }}-OS-node-v${{ matrix.node }}-pnpm-v${{ env.pnpm-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ matrix.os }}-OS-node-v${{ matrix.node }}-pnpm-v${{ env.pnpm-version }}-

      - name: Install packages
        run: pnpm install --frozen-lockfile

      - name: Build theme
        run: pnpm --filter @logchimp/theme build

  api-typecheck:
    name: API / Typecheck - OS ${{ matrix.os }} - Node v${{ matrix.node }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node: [22]
        os: [ubuntu-24.04]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 10

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: Cache .pnpm-store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ matrix.os }}-OS-node-v${{ matrix.node }}-pnpm-v${{ env.pnpm-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ matrix.os }}-OS-node-v${{ matrix.node }}-pnpm-v${{ env.pnpm-version }}-

      - name: Install packages
        run: pnpm install --frozen-lockfile

      - name: Typecheck
        run: pnpm --filter @logchimp/api exec pnpm tsc --noEmit

  api-unit:
    name: API / Unit Tests - OS ${{ matrix.os }} - Node v${{ matrix.node }}
    runs-on: ${{ matrix.os }}
    needs: [api-typecheck]

    strategy:
      matrix:
        node: [22]
        os: [ubuntu-24.04]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 10

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: Cache .pnpm-store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ matrix.os }}-OS-node-v${{ matrix.node }}-pnpm-v${{ env.pnpm-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ matrix.os }}-OS-node-v${{ matrix.node }}-pnpm-v${{ env.pnpm-version }}-

      - name: Install packages
        run: pnpm install --frozen-lockfile

      - name: Testing
        run: pnpm --filter @logchimp/api test:unit

  api-integration:
    name: API / Integration Tests - OS ${{ matrix.os }} - Node v${{ matrix.node }}
    runs-on: ${{ matrix.os }}
    needs: [api-unit]
    env:
      NODE_ENV: "testing"
      LOGCHIMP_DB_DATABASE: db
      LOGCHIMP_DB_HOST: "localhost"
      LOGCHIMP_DB_USER: user
      LOGCHIMP_DB_PASSWORD: password
      LOGCHIMP_DB_PORT: 5432
      LOGCHIMP_SECRET_KEY: bk6oqo21tbygcsnuflnda3whdyj7leav2w39wcmleqw2j4i5hcdwjam0tzropaevhl3h_dbnljdtyz0tb25yg1o1pak8nakgzm4tza6qp
      LOGCHIMP_MAIL_SERVICE: "logchimp"
      LOGCHIMP_MAIL_HOST: "smtp.example.com"
      LOGCHIMP_MAIL_USER: "logchimp@example.com"
      LOGCHIMP_MAIL_PORT: 587

    strategy:
      matrix:
        node: [22]
        os: [ubuntu-24.04]

    services:
      postgres:
        image: postgres:12.18
        env:
          POSTGRES_DB: db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 10

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - name: Cache .pnpm-store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ matrix.os }}-OS-node-v${{ matrix.node }}-pnpm-v${{ env.pnpm-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ matrix.os }}-OS-node-v${{ matrix.node }}-pnpm-v${{ env.pnpm-version }}-

      - name: Install packages
        run: pnpm install --frozen-lockfile

      - name: Database setup
        run: |
          pnpm --filter @logchimp/api exec pnpm tsc
          cd ./packages/server;

          # Run database migrations
          pnpm knex --knexfile ./dist/database/config.js migrate:latest;

          # Seeding database
          pnpm knex --knexfile ./dist/database/config.js seed:run;

      - name: Testing
        run: pnpm --filter @logchimp/api test:integration

      - name: Output logs
        if: always()
        run: |
          LOG_PATH="content/logs/logchimp-all.log"
          if [ -f "$LOG_PATH" ]; then
            cat "$LOG_PATH"
          fi

      - name: Store Code Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.runs-on }}
          path: ./coverage

  biome-tools:
    name: "Biome CLI"
    uses: ./.github/workflows/biome-tools.yml
