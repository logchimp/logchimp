name: Lighthouse test
on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

permissions:
  pull-requests: write
  contents: read

jobs:
  lighthouse:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22

      - name: Install wait-on and pnpm
        run: npm install -g wait-on pnpm serve

      - name: Run docker compose
        run: docker compose -f ./docker-compose.ci.yml up -d --build
        env:
          # Server
          LOGCHIMP_WEB_URL: "http://localhost:3000"
          LOGCHIMP_SECRET_KEY: "secret-key-1234"
          LOGCHIMP_MACHINE_SIGNATURE: xxx-xxx-xxx-xxx-xxx

          # Theme
          LOGCHIMP_API_URL: "http://localhost:8000"

      - name: Wait for frontend
        run: npx wait-on http://localhost:3000

      - name: Lighthouse test
        uses: treosh/lighthouse-ci-action@v12
        id: lhci
        with:
          urls: "http://localhost:3000/"
          uploadArtifacts: true

      - name: Format report
        id: format
        run: |
          manifest='${{ steps.lhci.outputs.manifest }}'

          perf=$(jq -r '([.[0].summary.performance * 100 | floor] | .[0])' <<< "$manifest")
          acc=$(jq -r '([.[0].summary.accessibility * 100 | floor] | .[0])' <<< "$manifest")
          bp=$(jq -r '([.[0].summary["best-practices"] * 100 | floor] | .[0])' <<< "$manifest")
          seo=$(jq -r '([.[0].summary.seo * 100 | floor] | .[0])' <<< "$manifest")
          pwa=$(jq -r '([.[0].summary.pwa * 100 | floor] | .[0])' <<< "$manifest" 2>/dev/null || echo "N/A")

          badge() {
            local score=$1
            if [ "$score" = "N/A" ]; then
              echo "âšª"
            elif [ "$score" -ge 90 ]; then
              echo "ðŸŸ¢"
            elif [ "$score" -ge 50 ]; then
              echo "ðŸŸ¡"
            else
              echo "ðŸ”´"
            fi
          }
          run_url="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          echo "COMMENT<<EOF" >> $GITHUB_ENV
          echo "**Lighthouse report**" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "| Category       | Score | Status |" >> $GITHUB_ENV
          echo "|----------------|-------|--------|" >> $GITHUB_ENV
          echo "| Performance    | $perf | $(badge $perf) |" >> $GITHUB_ENV
          echo "| Accessibility  | $acc  | $(badge $acc) |" >> $GITHUB_ENV
          echo "| Best Practices | $bp   | $(badge $bp) |" >> $GITHUB_ENV
          echo "| SEO            | $seo  | $(badge $seo) |" >> $GITHUB_ENV
          echo "| PWA            | $pwa  | $(badge $pwa) |" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "[View workflow run]($run_url)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Lighthouse sticky comment
        if: github.event_name == 'pull_request_target'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: lighthouse-report
          message: ${{ env.COMMENT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
